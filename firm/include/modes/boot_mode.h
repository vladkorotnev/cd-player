#pragma once
#include "mode.h"
#include <esper-gui/views/framework.h>

class BootMode: public Mode {
public:
    BootMode(const PlatformSharedResources res, ModeHost * host): 
        rootView {{EGPointZero, {160, 32}}},
        Mode(res, host) {
        static const uint8_t logo[] = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0xe0, 0x0f, 0x00, 
            0x03, 0x8f, 0x83, 0x80, 0x06, 0x1f, 0xc0, 0xc0, 0x0c, 0x3f, 0xe0, 0xf0, 0x00, 0x7f, 0xf1, 0xf0, 
            0x00, 0x7f, 0xf3, 0xf8, 0x20, 0x7d, 0xf3, 0xec, 0x00, 0x7d, 0xf1, 0xe4, 0x40, 0x7c, 0xf8, 0x86, 
            0x00, 0x7c, 0xf8, 0x02, 0x80, 0x3e, 0xfe, 0x3b, 0x80, 0x3e, 0xff, 0xfb, 0x80, 0x38, 0x3f, 0xf9, 
            0x00, 0x11, 0x9f, 0xfd, 0x00, 0x1a, 0x5f, 0xf9, 0x00, 0x1a, 0x50, 0x01, 0x00, 0x01, 0x98, 0x01, 
            0x80, 0x38, 0x3f, 0xf9, 0x80, 0x34, 0x7f, 0xfb, 0x00, 0xf8, 0xff, 0xfb, 0x01, 0xfe, 0x1f, 0xfb, 
            0x45, 0xcf, 0x03, 0xe6, 0x0b, 0xdd, 0x00, 0x06, 0x2f, 0x1c, 0x00, 0x0c, 0x17, 0x7e, 0x00, 0x08, 
            0x0b, 0x78, 0x00, 0x18, 0x05, 0xfc, 0x00, 0x10, 0x02, 0xf4, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 
            0x00, 0x28, 0x04, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 
            0x3f, 0xff, 0xe0, 0x00, 0x30, 0x70, 0x60, 0x00, 0x30, 0x20, 0x60, 0x00, 0x30, 0x20, 0x60, 0x00, 
            0x30, 0x20, 0x60, 0x00, 0x30, 0x20, 0x60, 0x00, 0x30, 0x20, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0xe0, 0x00, 0x1f, 0xc0, 0x60, 0x00, 
            0x18, 0xe0, 0x60, 0x00, 0x30, 0x60, 0x20, 0x00, 0x30, 0x30, 0x20, 0x00, 0x30, 0x38, 0x60, 0x00, 
            0x30, 0x1c, 0xe0, 0x00, 0x30, 0x1f, 0xc0, 0x00, 0x18, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x3f, 0xff, 0xe0, 0x00, 
            0x30, 0x18, 0x00, 0x00, 0x30, 0x18, 0x00, 0x00, 0x30, 0x18, 0x00, 0x00, 0x30, 0x18, 0x00, 0x00, 
            0x18, 0x30, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x12, 0x40, 0x00, 0x00, 0x12, 0x40, 0x00, 0x00, 
            0x12, 0x40, 0x00, 0x00, 0x0e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x01, 0xf8, 
            0x1f, 0xc0, 0x03, 0x2c, 0x18, 0x00, 0x03, 0xbc, 0x10, 0x00, 0x01, 0xbc, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x7c, 
            0x00, 0xfc, 0x00, 0x78, 0x03, 0xff, 0x00, 0x00, 0x0f, 0x87, 0xc0, 0x7c, 0x1c, 0x01, 0xc0, 0x7c, 
            0x18, 0x00, 0xe0, 0x40, 0x18, 0x00, 0x60, 0x7c, 0x30, 0x00, 0x20, 0x7c, 0x30, 0x00, 0x20, 0x00, 
            0x30, 0x00, 0x20, 0x00, 0x30, 0x00, 0x60, 0x02, 0x38, 0x00, 0x62, 0x7e, 0x18, 0x00, 0x42, 0x7e, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 
            0x3f, 0xff, 0xe2, 0x7c, 0x30, 0x00, 0x62, 0x7c, 0x30, 0x00, 0x60, 0x00, 0x30, 0x00, 0x60, 0x00, 
            0x30, 0x00, 0x60, 0x40, 0x18, 0x00, 0x61, 0xfc, 0x18, 0x00, 0xc1, 0xfc, 0x1c, 0x01, 0xc0, 0x44, 
            0x0f, 0x87, 0x80, 0x44, 0x07, 0xff, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 
            0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x5c, 0x3f, 0xff, 0xe0, 0x58, 0x3f, 0xff, 0xe0, 0x00, 
            0x30, 0x18, 0x00, 0x78, 0x30, 0x18, 0x00, 0x7c, 0x30, 0x18, 0x00, 0x04, 0x30, 0x18, 0x00, 0x7c, 
            0x18, 0x30, 0x00, 0x7c, 0x1f, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 
            0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x5c, 
            0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 
            0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x7c, 
            0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 
            0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00
        };
    
        static UI::Image logoimg = {
            .format = EGBufferFormat::EG_FMT_NATIVE,
            .size = {160, 32},
            .data = logo
        };
        auto imgview = std::make_shared<UI::ImageView>(UI::ImageView(&logoimg, {EGPointZero, logoimg.size}));
        rootView.subviews.push_back(imgview);
        imgview->set_needs_display();
        auto spinner = std::make_shared<UI::TinySpinner>(UI::TinySpinner({ {144, 6}, {12, 12} }));
        rootView.subviews.push_back(spinner);
    }

    UI::View& main_view() override {
        return rootView;
    }

private:
    UI::View rootView;
    
};